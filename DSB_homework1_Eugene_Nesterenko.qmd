---
title: "Homework 1"
author: "Eugene Nesterenko"
date: 2023-05-14
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(nycflights13)
library(skimr)

```

# Data Manipulation

## Problem 1: Use logical operators to find flights that:

    -   Had an arrival delay of two or more hours (\> 120 minutes)
    -   Flew to Houston (IAH or HOU)
    -   Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
    -   Departed in summer (July, August, and September)
    -   Arrived more than two hours late, but didn't leave late
    -   Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
#| label: problem-1
glimpse(flights) 
# Had an arrival delay of two or more hours (> 120 minutes)
flights %>% 
  filter(arr_delay > 120)

# Flew to Houston (IAH or HOU)
flights %>% 
  # filter for multiple destinations using OR operator
  filter(dest == "IAH" | dest == "HOU") 

# Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
flights %>% 
  # filter for multiple carriers using a vector (list) of possible values
  filter(carrier %in% c("UA","AA","DL"))

# Departed in summer (July, August, and September)
flights %>%
  # filter for multiple months using a vector of possible numerical month values
  filter(month %in% c(7,8,9))
  
# Arrived more than two hours late, but didn't leave late
flights %>% 
  # filter with criteria for departure and arrival delay using AND operator
  filter(dep_delay <= 0 & arr_delay > 120)

# Were delayed by at least an hour, but made up over 30 minutes in flight
flights %>%
  # filter with criteria for departure and make up time using sequential filters
  filter(dep_delay >= 60) %>% 
  filter((dep_delay - arr_delay) > 30)
```

We have found an unusual result for the *Arrived more than two hours late, but didn't leave late* filter. It must be the case of currupted data - we can hardly imagine flights that spent more than additional 1000 minutes in the air (arrival time delay was over 1000 minutes with non-positive departure delay)

## Problem 2: What months had the highest and lowest proportion of cancelled flights? Interpret any seasonal patterns. To determine if a flight was cancelled use the following code

<!-- -->

    flights %>% 
      filter(is.na(dep_time)) 

```{r}
#| label: problem-2

# What months had the highest and lowest % of cancelled flights?

# First, we create two dataframes - cancelled flights and total flights - with summary statistics

# Cancelled flights dataframe
cancelled_flights <- flights %>%
  
  # filter for NA values
  filter(is.na(dep_time)) %>%   
  
  # grouping dataset by months to calculate summary statistics
  group_by(month) %>%
  
  # dataframe is already for the cancelled flights, we just count the number of cases by month
  summarise(number_cancelled = n())   

# Total flights dataframe
total_flights <- flights %>%
  
  # no need to filter for the cancelled flights
  
  # grouping dataset by months to calculate summary statistics
  group_by(month) %>% 
  
  # dataframe is already for the total flights, we just count the total number of fligths by month
  summarise(number_total = n())   

# Joining two dataframes to have counts of cancelled and total flights in one table
# We expect each month to have non-NA value of cancelled and total flights - hence, use inner join
cancelled_percentage_flights <- inner_join(x = cancelled_flights, y = total_flights, by = "month")

# Adding new variable - percentage of cancelled flights, and arranging to find highest and lowest cases
cancelled_percentage_flights %>% 
  
  # Add a new variable for the percentage as (N of cancelled / N of total)*100, up to 1 digit precision
  mutate(percentage_cancelled = round((number_cancelled/number_total) * 100, digits = 1)) %>%
  
  # Arranging in descending order on percentage of cancelled flights
  arrange(desc(percentage_cancelled))

```

February has **the highest** proportion of cancelled flights (5.1%), while October has **the lowest** (0.8%). **Our hypothesis is that in February weather conditions in NYC often do not permit the plane to take off** (cold weather, ice on the runway, blizzard). Same factors could contribute to higher average delay time (though this hypothesis needs to be verified).

**For October-November** (percentage is similar), **perhaps, weather conditions are most favourable.** We also see the **seasonal factor only for autumn months (September - November), which indicates low percentage of cancelled flights**. Other seasons do not show a clear pattern.

## Problem 3: What plane (specified by the `tailnum` variable) traveled the most times from New York City airports in 2013? Please `left_join()` the resulting table with the table `planes` (also included in the `nycflights13` package).

For the plane with the greatest number of flights and that had more than 50 seats, please create a table where it flew to during 2013.

```{r}
#| label: problem-3

# Saving and printing a new table for number of flights by plane (tailnum)
(
flights_by_plane <- flights %>%  # use base dataset flights as a starting point
  
  # Selecting only year 2013
  filter(year == 2013) %>%
  
  # Deleting rows with unknown tail number (otherwise distorts statistics)
  drop_na(tailnum) %>%
    
  # Creating a dataframe grouped by plane
  group_by(tailnum) %>%
  
  # Counting number of flights by plane
  summarize(count_flights = n()) %>% 
  
  # Arranging in descending order to find the plane that travelled the most
  arrange(desc(count_flights))
)

# Joining the data on flight count with planes details. We want to preserve data on number of flights regardless of whether the tailnumber is registered in "planes" dictionary - hence, use the left join.
plane_data_number_flights <- left_join(x = flights_by_plane, y = planes, by = "tailnum")

# Print head rows of new table to take a look at data
head(plane_data_number_flights)

# We want to include only planes with more than 50 seats
# For this, we would save a new table
plane_data_number_flights_many_seats <- plane_data_number_flights %>%
  
  # Drop cases where number of seats is unknown (probably a redundant action, given the next filter)
  drop_na(seats) %>%
  # Leave only planes with over 50 seats
  filter(seats > 50)

  # dataframe was already arrange from most frequent to least frequent flyers, no need to arrange further

# Find the plane with hightest number of flights that has over 50 seats
head(plane_data_number_flights_many_seats,1)

# Save the most frequent flyer (tailnum) to a separate list (we don't know how to save to a single variable)
frequent_flyer <- plane_data_number_flights_many_seats[1:1,1:1]

# Save and print a table containing destinanations of the most frequent flyer
(
frequent_flyer_destinations <- flights %>% 
  
  # Selecting only the most frequently flying plane using a newly created list
  filter(tailnum %in% frequent_flyer) %>%
    
  # Selecting only year 2013
  filter(year == 2013) %>%
    
  # Showing only columns for plane (tail number) and destination
  select(c("tailnum","dest"))
)
```

The unconditioned arrangement shows that plane **N725MQ** has the highest number of flights, 575.

However, if we apply the filter on number of seats (*more than 50*), the result changes: now **N328AA** tops the list with 393 flights. The data frame **frequent_flyer_destinations** shows the destinations to which plane with tail number N328AA flew in 2013 - as expected, it has 393 rows.

We have tried to make a code more robust, saving the variable (list) for most frequent flyer and later applying as an input for flights filter. If the dataset changes, so might change the tail number of most frequent flyer - the code supports such case.

## Problem 4: The `nycflights13` package includes a table (`weather`) that describes the weather during 2013. Use that table to answer the following questions:

    -   What is the distribution of temperature (`temp`) in July 2013? Identify any important outliers in terms of the `wind_speed` variable.
    -   What is the relationship between `dewp` and `humid`?
    -   What is the relationship between `precip` and `visib`?

```{r}
head(weather)

# Save a dataframe for July 2013 only)
weather_july_2013 <- weather %>% 
  filter(year == 2013 & month == 7)

# Get summary statistics for July 2013, which allows to infer data about distribution and outliers for temperature and wind speed
skim(weather_july_2013)

# Further check the wind speed outliers. Hypothesis - wind speed of 0 is actually a missed data point
weather_july_2013 %>% 
  filter(wind_speed == 0) %>% 
  summarize(count = n())

# Draw a scatterplot to infer relationship between dew point and humidity
ggplot(weather, aes(x = dewp, y = humid)) +
  geom_point()

# Draw a scatterplot to infer relationship between precipitation level and visibility
ggplot(weather, aes(x = precip, y = visib)) +
  geom_point()

# Draw a scatterplot to infer relationship between precipitation level and visibility for July 2013 only
ggplot(weather_july_2013, aes(x = precip, y = visib)) +
  geom_point()
```

**Temperature in July 2013 has a mean of 80 degrees Fahrenheit and a standard deviation of 7.1**. It also **seems to be skewed to the right**, with median (79 degrees) being less than mean, and 75% percentile and maximum value farther from median than 25% percentile and minimum value respectively.

**Wind speed data seems to be incomplete in July 2013, with 2 missing points and as much as 79 points with wind speed of exactly 0** (unlikely result, looks more like lack of data than true case of 0 speed).

The scatter plot for the (dewp, humid) looks quite cumbersome, but from the shape **we can infer a positive correlation - the higher the dew point, the higher the humidity.** We believe these are related concepts (but not so sure on the definitions), so the correlation is expected.

The **precipitation-visibility** data shows no clear pattern on individual observations across years, and July 2013 data points to **slightly positive correlation**. This is **counterintuitive**, as we would expect rain and snow to reduce distance at which objects are visible.

## Problem 5: Use the `flights` and `planes` tables to answer the following questions:

    -   How many planes have a missing date of manufacture?
    -   What are the five most common manufacturers?
    -   Has the distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013? (Hint: you may need to use case_when() to recode the manufacturer name and collapse rare vendors into a category called Other.)

```{r}

```

## Problem 6: Use the `flights` and `planes` tables to answer the following questions:

    -   What is the oldest plane (specified by the tailnum variable) that flew from New York City airports in 2013?
    -   How many airplanes that flew from New York City are included in the planes table?

```{r}

```

## Problem 7: Use the `nycflights13` to answer the following questions:

    -   What is the median arrival delay on a month-by-month basis in each airport?
    -   For each airline, plot the median arrival delay for each month and origin airport.

```{r}

```

## Problem 8: Let's take a closer look at what carriers service the route to San Francisco International (SFO). Join the `flights` and `airlines` tables and count which airlines flew the most to SFO. Produce a new dataframe, `fly_into_sfo` that contains three variables: the `name` of the airline, e.g., `United Air Lines Inc.` not `UA`, the count (number) of times it flew to SFO, and the `percent` of the trips that that particular airline flew to SFO.

```{r}

```

And here is some bonus ggplot code to plot your dataframe

```{r}
#| label: ggplot-flights-toSFO
#| message: false
#| warning: false

fly_into_sfo %>% 
  
  # sort 'name' of airline by the numbers it times to flew to SFO
  mutate(name = fct_reorder(name, count)) %>% 
  
  ggplot() +
  
  aes(x = count, 
      y = name) +
  
  # a simple bar/column plot
  geom_col() +
  
  # add labels, so each bar shows the % of total flights 
  geom_text(aes(label = percent),
             hjust = 1, 
             colour = "white", 
             size = 5)+
  
  # add labels to help our audience  
  labs(title="Which airline dominates the NYC to SFO route?", 
       subtitle = "as % of total flights in 2013",
       x= "Number of flights",
       y= NULL) +
  
  theme_minimal() + 
  
  # change the theme-- i just googled those , but you can use the ggThemeAssist add-in
  # https://cran.r-project.org/web/packages/ggThemeAssist/index.html
  
  theme(#
    # so title is left-aligned
    plot.title.position = "plot",
    
    # text in axes appears larger        
    axis.text = element_text(size=12),
    
    # title text is bigger
    plot.title = element_text(size=18)
      ) +

  # add one final layer of NULL, so if you comment out any lines
  # you never end up with a hanging `+` that awaits another ggplot layer
  NULL
 
 
```

## Problem 9: Let's take a look at cancellations of flights to SFO. We create a new dataframe `cancellations` as follows

```{r}

cancellations <- flights %>% 
  
  # just filter for destination == 'SFO'
  filter(dest == 'SFO') %>% 
  
  # a cancelled flight is one with no `dep_time` 
  filter(is.na(dep_time))

```

I want you to think how we would organise our data manipulation to create the following plot. No need to write the code, just explain in words how you would go about it.

![](images/sfo-cancellations.png)

## Problem 10: On your own -- Hollywood Age Gap

The website https://hollywoodagegap.com is a record of *THE AGE DIFFERENCE IN YEARS BETWEEN MOVIE LOVE INTERESTS*. This is an informational site showing the age gap between movie love interests and the data follows certain rules:

-   The two (or more) actors play actual love interests (not just friends, coworkers, or some other non-romantic type of relationship)
-   The youngest of the two actors is at least 17 years old
-   No animated characters

The age gaps dataset includes "gender" columns, which always contain the values "man" or "woman". These values appear to indicate how the characters in each film identify and some of these values do not match how the actor identifies. We apologize if any characters are misgendered in the data!

The following is a data dictionary of the variables used

| variable            | class     | description                                                                                             |
|:-----------------|:-----------------|:------------------------------------|
| movie_name          | character | Name of the film                                                                                        |
| release_year        | integer   | Release year                                                                                            |
| director            | character | Director of the film                                                                                    |
| age_difference      | integer   | Age difference between the characters in whole years                                                    |
| couple_number       | integer   | An identifier for the couple in case multiple couples are listed for this film                          |
| actor_1\_name       | character | The name of the older actor in this couple                                                              |
| actor_2\_name       | character | The name of the younger actor in this couple                                                            |
| character_1\_gender | character | The gender of the older character, as identified by the person who submitted the data for this couple   |
| character_2\_gender | character | The gender of the younger character, as identified by the person who submitted the data for this couple |
| actor_1\_birthdate  | date      | The birthdate of the older member of the couple                                                         |
| actor_2\_birthdate  | date      | The birthdate of the younger member of the couple                                                       |
| actor_1\_age        | integer   | The age of the older actor when the film was released                                                   |
| actor_2\_age        | integer   | The age of the younger actor when the film was released                                                 |

```{r}

age_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')


```

How would you explore this data set? Here are some ideas of tables/ graphs to help you with your analysis

-   How is `age_difference` distributed? What's the 'typical' `age_difference` in movies?

-   The `half plus seven\` rule. Large age disparities in relationships carry certain stigmas. One popular rule of thumb is the [half-your-age-plus-seven](https://en.wikipedia.org/wiki/Age_disparity_in_sexual_relationships#The_.22half-your-age-plus-seven.22_rule) rule. This rule states you should never date anyone under half your age plus seven, establishing a minimum boundary on whom one can date. In order for a dating relationship to be acceptable under this rule, your partner's age must be:

$$\frac{\text{Your age}}{2} + 7 < \text{Partner Age} < (\text{Your age} - 7) * 2$$ How frequently does this rule apply in this dataset?

-   Which movie has the greatest number of love interests?
-   Which actors/ actresses have the greatest number of love interests in this dataset?
-   Is the mean/median age difference staying constant over the years (1935 - 2022)?
-   How frequently does Hollywood depict same-gender love interests?

# Deliverables

There is a lot of explanatory text, comments, etc. You do not need these, so delete them and produce a stand-alone document that you could share with someone. Render the edited and completed Quarto Markdown (qmd) file as a Word document (use the "Render" button at the top of the script editor window) and upload it to Canvas. You must be commiting and pushing tour changes to your own Github repo as you go along.

# Details

-   Who did you collaborate with: TYPE NAMES HERE
-   Approximately how much time did you spend on this problem set: ANSWER HERE
-   What, if anything, gave you the most trouble: ANSWER HERE

**Please seek out help when you need it,** and remember the [15-minute rule](https://mam2022.netlify.app/syllabus/#the-15-minute-rule){target="_blank"}. You know enough R (and have enough examples of code from class and your readings) to be able to do this. If you get stuck, ask for help from others, post a question on Slack-- and remember that I am here to help too!

> As a true test to yourself, do you understand the code you submitted and are you able to explain it to someone else?

# Rubric

13/13: Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Code is well-documented (both self-documented and with additional comments as necessary). Used tidyverse, instead of base R. Graphs and tables are properly labelled. Analysis is clear and easy to follow, either because graphs are labeled clearly or you've written additional text to describe how you interpret the output. Multiple Github commits. Work is exceptional. I will not assign these often.

8/13: Problem set is 60--80% complete and most answers are correct. This is the expected level of performance. Solid effort. Hits all the elements. No clear mistakes. Easy to follow (both the code and the output). A few Github commits.

5/13: Problem set is less than 60% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often. Displays minimal effort. Doesn't complete all components. Code is poorly written and not documented. Uses the same type of plot for each graph, or doesn't use plots appropriate for the variables being analyzed. No Github commits.
